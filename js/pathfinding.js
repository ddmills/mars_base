// Generated by CoffeeScript 1.3.1
(function() {
  var Guy;

  Guy = (function() {

    Guy.name = 'Guy';

    function Guy(name, color) {
      this.name = name;
      this.color = color;
      this.pos = window.mapper.get_random_pos();
      this.state = 'idle';
    }

    Guy.prototype.update = function() {
      var point, _i, _len, _ref, _results;
      if (this.state === 'idle') {
        this.state = 'has_target';
        this.target = window.mapper.get_random_pos();
        console.log(this.pos[0], this.pos[1], this.target[0], this.target[1]);
        this.path = window.mapper.path_finder.findPath(this.pos[0], this.pos[1], this.target[0], this.target[1], window.mapper.path_map);
        _ref = this.path;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _results.push(window.mapper.draw_box(point[0] * 16, point[1] * 16, 16, 16, {
            fillStyle: this.color
          }));
        }
        return _results;
      }
    };

    return Guy;

  })();

  $(window).ready(function() {
    window.mapper = {
      mouse_is_down: 0,
      init: function() {
        var colors, guy, i, j, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _results;
        this.canvas = $('#game_canvas');
        this.context = this.canvas[0].getContext("2d");
        this.grid_w = 30;
        this.grid_h = 30;
        this.grid_size = 16;
        this.map = [];
        for (i = _i = 0, _ref = this.grid_h - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.map.push([]);
          for (j = _j = 0, _ref1 = this.grid_w - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            this.map[i].push(0);
          }
        }
        this.path_map = new PF.Grid(this.grid_w, this.grid_h, this.map);
        this.path_finder = new PF.JumpPointFinder();
        this.canvas.mousedown(function(e) {
          return window.mapper.mousedown(e);
        });
        this.canvas.mousemove(function(e) {
          return window.mapper.mousemove(e);
        });
        $(window).mouseup(function(e) {
          return window.mapper.mouseup(e);
        });
        this.guys = [];
        colors = ['silver', 'pink', 'blue', 'cyan', 'green', '#bada55'];
        for (i = _k = 0; _k <= 1; i = ++_k) {
          this.guys.push(new Guy('anon', colors[i]));
        }
        this.draw();
        _ref2 = this.guys;
        _results = [];
        for (_l = 0, _len = _ref2.length; _l < _len; _l++) {
          guy = _ref2[_l];
          _results.push(guy.update());
        }
        return _results;
      },
      mousedown: function(e) {
        return this.mouse_is_down = 1;
      },
      mousemove: function(e) {
        var pos;
        if (this.mouse_is_down) {
          pos = this.mouse_to_grid(e.clientX, e.clientY);
          this.map[pos[0]][pos[1]] = 1;
          return this.draw();
        }
      },
      mouseup: function(e) {
        return this.mouse_is_down = 0;
      },
      mouse_to_grid: function(x, y) {
        var c_o;
        c_o = this.canvas.offset();
        x -= c_o.left;
        y -= c_o.top;
        x = parseInt(x / 16);
        y = parseInt(y / 16);
        x = window.util.constrict(x, 0, this.grid_w);
        y = window.util.constrict(y, 0, this.grid_h);
        return [x, y];
      },
      get_random_pos: function() {
        var x, y;
        x = Math.random() * (this.grid_w - 1);
        y = Math.random() * (this.grid_h - 1);
        return [parseInt(x), parseInt(y)];
      },
      draw: function() {
        var column, i, j, row, _i, _len, _ref, _results;
        _ref = this.map;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          row = _ref[i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
              column = row[j];
              if (column === 0) {
                _results1.push(this.draw_box(i * 16, j * 16, 16, 16));
              } else {
                _results1.push(this.draw_box(i * 16, j * 16, 16, 16, {
                  fillStyle: "red"
                }));
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      },
      draw_box: function(x, y, w, h, options) {
        if (x == null) {
          x = 0;
        }
        if (y == null) {
          y = 0;
        }
        if (w == null) {
          w = 100;
        }
        if (h == null) {
          h = 100;
        }
        if (options == null) {
          options = {
            fillStyle: "transparent",
            strokeStyle: "rgb(113, 183, 248)",
            lineWidth: 1
          };
        }
        x += .5;
        y += .5;
        this.context.fillStyle = options.fillStyle;
        this.context.strokeStyle = options.strokeStyle;
        this.context.lineWidth = options.lineWidth;
        this.context.beginPath();
        this.context.moveTo(x, y);
        this.context.lineTo(x + w, y);
        this.context.lineTo(x + w, y + h);
        this.context.lineTo(x, y + h);
        this.context.lineTo(x, y);
        this.context.closePath();
        this.context.fill();
        if (options.lineWidth > 0) {
          return this.context.stroke();
        }
      }
    };
    return window.mapper.init();
  });

}).call(this);
