// Generated by CoffeeScript 1.3.1
(function() {

  $(window).load(function() {
    window.Terrain = {
      init: function() {
        this.width = window.Map.width;
        this.height = window.Map.height;
        this.tilesize = window.Map.tilesize;
        this.perlin = new PERLIN.Generator();
        this.perlin.octaves = 9;
        this.perlin.frequency = .09;
        return this.zones = {};
      },
      draw_terrain: function() {
        var B, BL, BR, CAPE, CAPN, CAPS, CAPW, DB, DBL, DBLI, DBR, DBRI, DH, DL, DR, DT, DTL, DTLI, DTR, DTRI, DV, HOLE, L, M, R, T, TL, TR, column, draw, i, id, j, row, sx, sy, _i, _j, _len, _len1, _ref;
        console.log("terrain drawing");
        window.Draw.use_layer('background');
        this.perlin.generate([0, 0], [this.width, this.height], function(point, value) {
          var rot, sx, sy;
          sx = (point[0] + parseInt(point[0] / 16) + parseInt(point[1] / 8)) % 8;
          sy = 7 - (point[1] + parseInt(point[1] / 16)) % 8;
          window.Draw.context.globalAlpha = 1.0;
          rot = false;
          window.Draw.sub_image('terrain3', point[0] * 32, point[1] * 32, 32, 32, 32, [sx, sy], rot);
          sx = (parseInt(point[0])) % 16;
          sy = (parseInt(point[1])) % 16;
          window.Draw.context.globalAlpha = value * value;
          return window.Draw.sub_image('terrain', point[0] * 32, point[1] * 32, 32, 32, 16, [sx, sy]);
        });
        this.perlin.octaves = 5;
        this.perlin.frequency = .6;
        this.do_zone('dark');
        _ref = this.zones['dark'];
        for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
          column = _ref[j];
          for (i = _j = 0, _len1 = column.length; _j < _len1; i = ++_j) {
            row = column[i];
            draw = false;
            TL = id & 1;
            T = id & 2;
            TR = id & 4;
            L = id & 8;
            R = id & 16;
            BL = id & 32;
            B = id & 64;
            BR = id & 128;
            M = id & 256;
            DTL = [0, 0];
            DT = [1, 0];
            DTR = [2, 0];
            DL = [0, 1];
            DR = [2, 1];
            DBL = [0, 2];
            DB = [1, 2];
            DBR = [2, 2];
            DTLI = [1, 4];
            DTRI = [2, 4];
            DBLI = [1, 5];
            DBRI = [2, 5];
            DH = [0, 4];
            DV = [0, 5];
            CAPN = [1, 7];
            CAPS = [0, 6];
            CAPE = [0, 7];
            CAPW = [1, 6];
            HOLE = [0, 5];
            draw = false;
            id = this.get_identity('zone_dark', [i, j], function(v) {
              if (v > .5) {
                return true;
              }
            });
            if (M) {
              if (B && !T && L && R) {
                draw = DT;
              }
              if (T && !B && L && R) {
                draw = DB;
              }
              if (L && !R && T && B) {
                draw = DR;
              }
              if (R && !L && T && B) {
                draw = DL;
              }
              if (T && R && (!L && !B)) {
                draw = DBL;
              }
              if (T && L && (!R && !B)) {
                draw = DBR;
              }
              if (B && R && (!L && !T)) {
                draw = DTL;
              }
              if (B && L && (!R && !T)) {
                draw = DTR;
              }
              if (T && B && R && L) {
                if (!TL && TR && BL && BR) {
                  draw = DBRI;
                }
                if (!TR && TL && BL && BR) {
                  draw = DBLI;
                }
                if (!BL && TR && TL && BR) {
                  draw = DTRI;
                }
                if (!BR && TR && TL && BL) {
                  draw = DTLI;
                }
              }
              if ((L || R) && !T && !B) {
                draw = DV;
              }
              if (!L && !R && (T || B)) {
                draw = DH;
              }
              if (!L && !R && !T && !B) {
                draw = HOLE;
              }
              if (!L && !R && B && !T) {
                draw = CAPN;
              }
              if (!L && !R && !B && T) {
                draw = CAPS;
              }
              if (!L && R && !B && !T) {
                draw = CAPE;
              }
              if (L && !R && !B && !T) {
                draw = CAPW;
              }
            }
            window.Draw.use_layer('background');
            window.Draw.context.globalAlpha = 1.0;
            if (draw) {
              window.Draw.context.globalAlpha = row + .1;
              window.Draw.sub_image('zone01', i * 32, j * 32, 32, 32, 32, draw);
            } else if (M) {
              sx = Math.floor(Math.random() * 4);
              sy = Math.floor(Math.random() * 6);
              window.Draw.context.globalAlpha = (row + .1) * .8;
              window.Draw.sub_image('zone01', i * 32, j * 32, 32, 32, 32, [sx + 3, sy]);
            }
          }
        }
        this.perlin = new PERLIN.Generator();
        this.perlin.octaves = 2;
        this.perlin.frequency = .07;
        this.perlin.persistance = .2;
        return this.perlin.generate([0, 0], [this.width, this.height], function(point, value) {
          if (value > 0) {
            window.Draw.use_layer('background');
            sx = point[0] % 16;
            sy = point[1] % 16;
            window.Draw.context.globalAlpha = (1 - value) * (1 - value);
            return window.Draw.sub_image('terrain2', point[0] * 32, point[1] * 32, 32, 32, 32, [sx, sy]);
          }
        });
      },
      get_identity: function(map, pos, threshold) {
        var B, BL, BR, L, M, R, T, TL, TR, id;
        if (threshold == null) {
          threshold = false;
        }
        if (!threshold) {
          threshold = function(v) {
            if (v > 0) {
              return true;
            }
            return false;
          };
        }
        TL = 1;
        T = 2;
        TR = 4;
        L = 8;
        R = 16;
        BL = 32;
        B = 64;
        BR = 128;
        M = 256;
        id = 0;
        if (threshold(window.Map.get(map, pos[0], pos[1]))) {
          id += M;
        }
        if (threshold(window.Map.get(map, pos[0] - 1, pos[1] - 1))) {
          id += TL;
        }
        if (threshold(window.Map.get(map, pos[0], pos[1] - 1))) {
          id += T;
        }
        if (threshold(window.Map.get(map, pos[0] + 1, pos[1] - 1))) {
          id += TR;
        }
        if (threshold(window.Map.get(map, pos[0] - 1, pos[1]))) {
          id += L;
        }
        if (threshold(window.Map.get(map, pos[0] + 1, pos[1]))) {
          id += R;
        }
        if (threshold(window.Map.get(map, pos[0] - 1, pos[1] + 1))) {
          id += BL;
        }
        if (threshold(window.Map.get(map, pos[0], pos[1] + 1))) {
          id += B;
        }
        if (threshold(window.Map.get(map, pos[0] + 1, pos[1] + 1))) {
          id += BR;
        }
        return id;
      },
      do_zone: function(name) {
        this.zones[name] = window.Map.create_layer('zone_' + name, 0);
        window.Draw.context.globalAlpha = 1;
        this.perlin.octaves = 12;
        this.perlin.frequency = .09;
        return this.perlin.generate([0, 0], [this.width, this.height], function(point, value) {
          return window.Map.set('zone_' + name, point[0], point[1], value);
        });
      }
    };
    return window.Terrain.init();
  });

}).call(this);
