// Generated by CoffeeScript 1.3.3
(function() {
  var Hack, Hash,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Hack = (function() {

    function Hack() {}

    return Hack;

  })();

  Hash = (function(_super) {

    __extends(Hash, _super);

    function Hash(size) {
      this.size = size;
      this.data = {};
      this.members = {};
    }

    Hash.prototype.add = function(obj) {
      var bucket;
      if (!this.members[obj.EID]) {
        bucket = this.pos_to_bucket(obj.pos);
        this.members[obj.EID] = bucket;
        if (!this.data[bucket]) {
          this.data[bucket] = [];
        }
        return this.data[bucket].push(obj);
      } else {
        return console.log('cant add to hash: ', obj);
      }
    };

    Hash.prototype.remove = function(obj) {
      var bucket;
      if (this.members[obj.EID]) {
        bucket = this.members[obj.EID];
        this._remove(this.data[this.members[obj.EID]], obj);
        return delete this.members[obj.EID];
      }
    };

    Hash.prototype.pos_to_bucket = function(pos) {
      var bucket;
      return bucket = [parseInt(pos[0] / this.size), parseInt(pos[0] / this.size)];
    };

    Hash.prototype.put_in_data = function(obj, bucket) {
      if (!this.data[bucket]) {
        this.data[bucket] = [];
      }
      if (__indexOf.call(this.data[bucket], obj) < 0) {
        this.data[bucket].push(obj);
      }
      return this.members[obj.EID] = bucket;
    };

    Hash.prototype.update_member = function(obj) {
      var bucket, without;
      if (this.members[obj.EID] != null) {
        bucket = this.pos_to_bucket(obj.pos);
        if (!this.compare(this.members[obj.EID], bucket)) {
          if (this.data[this.members[obj.EID]]) {
            without = this._remove(this.data[this.members[obj.EID]], obj);
            if (without) {
              this.data[this.members[obj.EID]] = without;
            }
            return this.put_in_data(obj, bucket);
          }
        }
      }
    };

    Hash.prototype._remove = function(listing, obj) {
      var index;
      index = listing.indexOf(obj);
      if (index !== -1) {
        listing = listing.splice(index, 1);
      }
      return false;
    };

    Hash.prototype.compare = function(list1, list2) {
      if (list1[0] === list2[0] && list1[1] === list2[1]) {
        return true;
      }
      return false;
    };

    Hash.prototype.get_within = function(pos, dist, filter) {
      var b_radius, bucket, i, j, obj, results, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      if (filter == null) {
        filter = false;
      }
      bucket = this.pos_to_bucket(pos);
      b_radius = Math.floor(dist / this.size);
      if (b_radius === 0) {
        b_radius = 1;
      }
      results = [];
      for (i = _i = _ref = bucket[0] - b_radius, _ref1 = bucket[0] + b_radius; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        for (j = _j = _ref2 = bucket[1] - b_radius, _ref3 = bucket[1] + b_radius; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
          if (this.data[[i, j]] != null) {
            if (filter) {
              _ref4 = this.data[[i, j]];
              for (_k = 0, _len = _ref4.length; _k < _len; _k++) {
                obj = _ref4[_k];
                if (obj.nombre === filter) {
                  results.push(obj);
                }
              }
            } else {
              results = results.concat(this.data[[i, j]]);
            }
          }
        }
      }
      if (results.length > 0) {
        return results;
      } else {
        return false;
      }
    };

    Hash.prototype.get_closest = function(pos, obj_list) {};

    return Hash;

  })(Hack);

  window.Entities = {
    init: function() {
      window.Events.add_listener(this);
      this.classes = {};
      this.path_finder = new PF.JumpPointFinder({
        allowDiagonal: false,
        dontCrossCorners: true
      });
      this.sentient = [];
      this.objects = [];
      this.sentient_hash = new Hash(64);
      this.objects_hash = new Hash(64);
      window.Draw.create_layer('objects', true);
      return window.Draw.persistant_layers.objects.css('z-index', 999999);
    },
    update: function(delta) {
      var thing, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (this.objects != null) {
        _ref = this.objects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          thing = _ref[_i];
          thing.__update(delta);
        }
      }
      if (this.sentient != null) {
        _ref1 = this.sentient;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          thing = _ref1[_j];
          if (thing !== void 0) {
            _results.push(thing.__update(delta));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    },
    get_path: function(x, y, x2, y2) {
      var grid;
      grid = new PF.Grid(window.Map.width, window.Map.height, window.Map.arrays['pathfinding']);
      try {
        return this.path_finder.findPath(x, y, x2, y2, grid);
      } catch (error) {
        return false;
      }
    },
    add_class: function(name, ancestor) {
      if (ancestor == null) {
        ancestor = 'Entity';
      }
      if (this.classes[name] != null) {
        return false;
      }
      if (this.classes[ancestor] != null) {
        eval("this.classes[name] = (function(_super) {          __extends(" + name + ", _super);          function " + name + "() {            return " + name + ".__super__.constructor.apply(this, arguments);          }          return " + name + ";        })(this.classes[ancestor]);");
        return this.classes[name];
      }
    }
  };

  $(window).ready(function() {
    window.Draw.add_image('tracks', "./textures/tracks.png");
    window.Draw.add_image('prints', "./textures/prints.png");
    window.Draw.add_image('colonist', "./textures/astronauts/colonist.png");
    window.Draw.add_image('shadow', "./textures/astronauts/shadow.png");
    window.Draw.add_image('engineer', "./textures/astronauts/engineer.png");
    window.Draw.add_image('rock', "./textures/objects/rock.png");
    window.Draw.add_image('wrench', "./textures/objects/wrench.png");
    window.Draw.add_image('launchpad', "./textures/objects/launchpad.png");
    window.Draw.add_image('corpse', "./textures/astronauts/corpse.png");
    window.Draw.add_image('suitcorpse', "./textures/astronauts/colonist_suit_dead.png");
    window.Draw.add_image('crate', "./textures/objects/crate_closed.png");
    window.Draw.add_image('airtanks', "./textures/objects/airtanks.png");
    window.Draw.add_image('emptytanks', "./textures/objects/emptytanks.png");
    window.Draw.add_image('solarpanel', "./textures/objects/solarpanel.png");
    window.Draw.add_image('wrench', "./textures/objects/wrench.png");
    window.Draw.add_image('door', "./textures/objects/door.png");
    window.Draw.add_image('locker', "./textures/objects/locker.png");
    window.Draw.add_image('barewalk', "./textures/astronauts/colonist_bare_walk.png");
    window.Draw.add_image('suitwalk', "./textures/astronauts/colonist_suit_walk.png");
    window.Draw.add_image('door_h', "./textures/objects/door_h.png");
    window.Draw.add_image('door_v', "./textures/objects/door_v.png");
    return window.Entities.init();
  });

}).call(this);
