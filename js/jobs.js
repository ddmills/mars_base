// Generated by CoffeeScript 1.3.1
(function() {
  var Job,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Job = (function() {

    Job.name = 'Job';

    function Job(type) {
      this.type = type != null ? type : 'default';
      this.instructions = [];
      this.timer = 0;
      this.assigned = false;
      this.timeout = 10000;
      this.assigned = false;
      this.index = 0;
    }

    Job.prototype.get_instruction = function() {
      if (this.index > this.instructions.length) {
        this.index = 0;
      } else {
        this.index += 1;
        return this.instructions[this.index - 1];
      }
    };

    Job.prototype.to_string = function() {
      return 'job: ' + this.type;
    };

    Job.prototype.update = function(delta) {
      if (this.assigned) {
        this.timer += delta;
        if (this.timer > this.timeout) {
          this.assigned = false;
          return window.Jobs.fail(this);
        }
      }
    };

    Job.prototype.complete = function() {
      if (this.is_done()) {
        return window.Jobs.complete(this);
      } else {
        return window.Jobs.fail(this);
      }
    };

    Job.prototype.is_done = function() {
      return true;
    };

    Job.prototype.add_instruction = function(thing) {
      if (typeof thing === 'string') {
        this.instructions.push(thing);
        return true;
      }
      if (typeof thing === 'number') {
        this.instructions.push(thing);
        return true;
      }
      if (thing instanceof Array) {
        if (thing.length === 2) {
          this.instructions.push(new window.SlowDataTypes.Vect2D(thing[0], thing[1]));
          return true;
        }
      }
      if (typeof thing === 'object') {
        if (thing.EID != null) {
          this.instructions.push(new window.SlowDataTypes.EntityRef(thing));
          return true;
        }
      }
      return false;
    };

    Job.prototype.pos_match = function(pos1, pos2) {
      if ((pos1 != null) && (pos2 != null) && pos1 instanceof Array && pos2 instanceof Array && pos1.length === 2 && pos2.length === 2) {
        if (pos1[0] === pos2[0] && pos1[1] === pos2[1]) {
          return true;
        }
      }
      return false;
    };

    Job.prototype.pos_match_near = function(pos1, pos2) {
      if ((pos1 != null) && (pos2 != null) && pos1 instanceof Array && pos2 instanceof Array && pos1.length === 2 && pos2.length === 2) {
        if (Math.abs(pos1[0] - pos2[0]) <= 1 && Math.abs(pos1[1] - pos2[1]) <= 1) {
          return true;
        }
      }
      return false;
    };

    return Job;

  })();

  window.Jobs = {
    init: function() {
      window.Events.add_listener(this);
      this.job_class = Job;
      this.open_jobs = [];
      return this.assigned_jobs = [];
    },
    update: function(delta) {
      var job, _i, _len, _ref, _results;
      _ref = this.assigned_jobs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        job = _ref[_i];
        if (job != null) {
          _results.push(job.update(delta));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    fail: function(job) {
      job.timer = 0;
      job.index = 0;
      if (__indexOf.call(this.assigned_jobs, job) >= 0) {
        this.assigned_jobs.remove(job);
      }
      if (__indexOf.call(this.open_jobs, job) < 0) {
        return this.open_jobs.push(job);
      }
    },
    complete: function(job) {
      if (__indexOf.call(this.assigned_jobs, job) >= 0) {
        if (job != null) {
          return this.assigned_jobs.remove(job);
        }
      }
    },
    get_job: function(entity) {
      var job;
      this.update_listings();
      job = this.open_jobs.pop();
      if (job) {
        entity.job = job;
        job.assigned = entity;
        this.assigned_jobs.push(job);
        return job;
      }
    },
    add_job: function(job) {
      return this.open_jobs.push(job);
    },
    update_listings: function() {
      var job, tile, _i, _len, _ref;
      window.Tiles.under_construction.reverse();
      _ref = window.Tiles.under_construction;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        job = new Job('build');
        job.tile = tile;
        job.instructions.push(new window.SlowDataTypes.Vect2D(tile.x, tile.y));
        job.is_done = function() {
          console.log('job.is_done: ', this.tile);
          if (this.tile && this.tile.built) {
            return true;
          }
          return false;
        };
        this.open_jobs.push(job);
      }
      return window.Tiles.under_construction = [];
    }
  };

  $(window).ready(function() {
    var AxisNum, EntityRef, RegisterStack, Vect2D;
    Vect2D = window.SlowDataTypes.Vect2D;
    AxisNum = window.SlowDataTypes.AxisNum;
    EntityRef = window.SlowDataTypes.EntityRef;
    RegisterStack = window.SlowDataTypes.RegisterStack;
    return window.Jobs.init();
  });

}).call(this);
