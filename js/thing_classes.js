// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(window).ready(function() {
    var Airtank, Door, Entity, Launchpad, Placeable, Thing;
    Entity = (function() {

      function Entity(nombre, image, pos) {
        this.nombre = nombre != null ? nombre : 'thing';
        this.image = image != null ? image : 'sprite';
        this.pos = pos != null ? pos : [0, 0];
        this.EID = window.get_unique_id();
        this.draw_hooks = [];
        this.tile_pos = [parseInt(this.pos[0] / window.Map.tilesize), parseInt(this.pos[1] / window.Map.tilesize)];
        this.debug = [];
        this.half_size = 16;
        this.no_path = false;
        this.sprite_size = 32;
        this.sprite_offset = [0, 0];
        this.claimed = false;
        this.state_que = [];
        this.hidden = false;
        this.block_build = false;
        this.needs_draw = true;
        this.persistant_draw = true;
        this.init();
        this.init_2();
      }

      Entity.prototype.init = function() {};

      Entity.prototype.init_2 = function() {};

      Entity.prototype.__update = function(delta) {
        this.pos_to_tile_pos();
        this.delta_time = delta;
        this.total_time += delta;
        this.frame_count += 1;
        if (this['_' + this.state] != null) {
          this['_' + this.state]();
        }
        if (!this.hidden) {
          this.draw();
        }
        return this.update(delta);
      };

      Entity.prototype.que_add_first = function(state) {
        return this.state_que = [state].concat(this.state_que);
      };

      Entity.prototype.que_add_last = function(state) {
        return this.state_que.push(state);
      };

      Entity.prototype.hide = function() {
        if (!this.hidden) {
          this.hidden = true;
          if (this.persistant_draw) {
            window.Draw.use_layer('objects');
            return window.Draw.clear_box(this.pos[0], this.pos[1], this.sprite_size, this.sprite_size);
          }
        }
      };

      Entity.prototype.show = function() {
        if (this.hidden) {
          this.hidden = false;
          if (this.persistant_draw) {
            return this.needs_draw = true;
          }
        }
      };

      Entity.prototype.draw = function() {
        var drawn, hook, _i, _len, _ref, _results;
        if (this.persistant_draw === true) {
          if (this.needs_draw) {
            window.Draw.use_layer('objects');
            drawn = window.Draw.image(this.image, this.pos[0] + this.sprite_offset[0], this.pos[1] + this.sprite_offset[0], this.sprite_size, this.sprite_size);
            if (drawn) {
              this.needs_draw = false;
            }
          }
        } else {
          window.Draw.use_layer('entities');
          drawn = window.Draw.image(this.image, this.pos[0] + this.sprite_offset[0], this.pos[1] + this.sprite_offset[0], this.sprite_size, this.sprite_size);
        }
        _ref = this.draw_hooks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hook = _ref[_i];
          _results.push(this[hook]());
        }
        return _results;
      };

      Entity.prototype.update = function() {};

      Entity.prototype.pos_to_tile_pos = function() {
        if (this.pos != null) {
          return this.tile_pos = [parseInt((this.pos[0] + this.half_size) / window.Map.tilesize), parseInt((this.pos[1] + this.half_size) / window.Map.tilesize)];
        }
      };

      Entity.prototype.destroy = function() {
        var obj_in_map;
        console.log('destroying ', this);
        window.Entities.objects_hash.remove_member(this);
        window.Entities.sentient_hash.remove_member(this);
        if (this.no_path) {
          window.Map.set('pathfinding', this.tile_pos[0], this.tile_pos[1], 0);
        }
        console.log(__indexOf.call(window.Entities.sentient, this) >= 0);
        window.Entities.objects.remove(this);
        window.Entities.sentient.remove(this);
        if (this.persistant_draw) {
          window.Draw.clear_box(this.pos[0], this.pos[1], this.sprite_size, this.sprite_size);
        }
        obj_in_map = window.Map.get('objects', this.tile_pos[0], this.tile_pos[1]);
        if (obj_in_map) {
          obj_in_map.remove(this);
        }
        return delete this;
      };

      return Entity;

    })();
    Thing = (function(_super) {

      __extends(Thing, _super);

      function Thing() {
        return Thing.__super__.constructor.apply(this, arguments);
      }

      Thing.prototype.init = function() {
        var obj_in_map;
        window.Entities.objects.push(this);
        window.Entities.objects_hash.add(this);
        obj_in_map = window.Map.get('objects', this.tile_pos[0], this.tile_pos[1]);
        if (!obj_in_map) {
          window.Map.set('objects', this.tile_pos[0], this.tile_pos[1], [this]);
        } else {
          obj_in_map.push(this);
        }
        return this.init_2();
      };

      return Thing;

    })(Entity);
    Placeable = (function(_super) {

      __extends(Placeable, _super);

      function Placeable() {
        return Placeable.__super__.constructor.apply(this, arguments);
      }

      Placeable.prototype.init_2 = function() {
        this.placed = false;
        return window.Placer.register(this);
      };

      return Placeable;

    })(Thing);
    Door = (function(_super) {

      __extends(Door, _super);

      function Door() {
        return Door.__super__.constructor.apply(this, arguments);
      }

      Door.prototype.init = function() {
        var obj_in_map;
        this.drawn = false;
        this.open = 0;
        window.Entities.objects.push(this);
        window.Entities.objects_hash.add(this);
        obj_in_map = window.Map.get('objects', this.tile_pos[0], this.tile_pos[1]);
        if (!obj_in_map) {
          window.Map.set('objects', this.tile_pos[0], this.tile_pos[1], [this]);
        } else {
          obj_in_map.push(this);
        }
        window.Draw.use_layer('objects');
        window.Draw.clear_box(this.pos[0], this.pos[1], 32, 32);
        return window.Map.set('pathfinding', this.tile_pos[0], this.tile_pos[1], 0);
      };

      Door.prototype.draw = function() {
        var hook, _i, _len, _ref, _results;
        this.open -= 1;
        if (this.open < 0) {
          this.open = 0;
        }
        if (!this.drawn) {
          window.Draw.use_layer('tiles');
          window.Draw.clear_box(this.pos[0], this.pos[1], 32, 32);
          window.Draw.image('supply', this.pos[0], this.pos[1], 32, 32);
          if (this.image === 'door_h') {
            window.Draw.image('corridor', this.pos[0] + this.sprite_offset[0], this.pos[1] + this.sprite_offset[0] + 11, (this.sprite_size - 1) - this.open, 10, {
              fillStyle: 'red'
            });
          } else {
            window.Draw.image('corridor', this.pos[0] + this.sprite_offset[0] + 11, this.pos[1] + this.sprite_offset[0], 10, (this.sprite_size - 1) - this.open, {
              fillStyle: 'red'
            });
          }
          window.Draw.image(this.image, this.pos[0] + this.sprite_offset[0], this.pos[1] + this.sprite_offset[0], this.sprite_size, this.sprite_size);
        }
        _ref = this.draw_hooks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hook = _ref[_i];
          _results.push(this[hook]());
        }
        return _results;
      };

      Door.prototype.visited = function() {
        this.open += 2;
        if (this.open > 32) {
          return this.open = 32;
        }
      };

      return Door;

    })(Placeable);
    Launchpad = (function(_super) {

      __extends(Launchpad, _super);

      function Launchpad() {
        return Launchpad.__super__.constructor.apply(this, arguments);
      }

      Launchpad.prototype.init = function() {
        var i, j, obj_in_map, _i, _results;
        this.persistant_draw = false;
        this.block_build = true;
        window.Entities.objects.push(this);
        window.Entities.objects_hash.add(this);
        _results = [];
        for (i = _i = -2; _i <= 3; i = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = -2; _j <= 3; j = ++_j) {
              obj_in_map = window.Map.get('objects', this.tile_pos[0] + i, this.tile_pos[1] + j);
              if (!obj_in_map) {
                _results1.push(window.Map.set('objects', this.tile_pos[0] + i, this.tile_pos[1] + j, [this]));
              } else {
                _results1.push(obj_in_map.push(this));
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      return Launchpad;

    })(Thing);
    Airtank = (function(_super) {

      __extends(Airtank, _super);

      function Airtank() {
        return Airtank.__super__.constructor.apply(this, arguments);
      }

      Airtank.prototype.use = function(entity) {
        if (!this.oxygen) {
          this.oxygen = 80000;
          this.max_oxygen = 80000;
        }
        if (this.oxygen > 30) {
          entity.oxygen += 30;
          this.oxygen -= 30;
        } else {
          return true;
        }
        if (entity.oxygen >= entity.max_oxygen) {
          return true;
        }
        if (this.oxygen >= this.max_oxygen) {
          this.nombre = 'empty tank';
          return this.image = 'emptytanks';
        }
      };

      return Airtank;

    })(Placeable);
    window.Entities.classes.Entity = Entity;
    window.Entities.classes.Thing = Thing;
    window.Entities.classes.Placeable = Placeable;
    window.Entities.classes.Door = Door;
    window.Entities.classes.Launchpad = Launchpad;
    return window.Entities.classes.Airtank = Airtank;
  });

}).call(this);
