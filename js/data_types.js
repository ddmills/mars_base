// Generated by CoffeeScript 1.3.3
(function() {
  var AxisNum, EntityRef, RegisterStack, Vect2D;

  Vect2D = (function() {

    function Vect2D(x, y) {
      this.x = x;
      this.y = y;
      this.type = 'v';
    }

    Vect2D.prototype.to_string = function() {
      return '' + this.x + ',' + this.y;
    };

    Vect2D.prototype.operate = function(op, thing, apply) {
      var nv, value, xx, yy, _ref;
      value = false;
      if (op === '+' || op === '-') {
        if (typeof thing === 'number') {
          return thing;
        }
      }
      if (typeof thing === 'object') {
        if (thing.v != null) {
          if (op === '=') {
            nv = new Vect2D(thing.x, thing.y);
            return nv;
          }
        }
        if (thing.axis != null) {
          value = parseInt(thing.value);
          if ((_ref = thing.axis) === 'x' || _ref === 'y') {
            if (op === '+') {
              value = this[thing.axis] + value;
              if (apply) {
                this[thing.axis] = value;
              }
              nv = new Vect2D(this.x, this.y);
              nv[thing.axis] = value;
              return nv;
            }
            if (op === '-') {
              value = this[thing.axis] - value;
              if (apply) {
                this[thing.axis] = value;
              }
              nv = new Vect2D(this.x, this.y);
              nv[thing.axis] = value;
              return nv;
            }
            if (op === '*') {
              value = this[thing.axis] * value;
              if (apply) {
                this[thing.axis] = value;
              }
              nv = new Vect2D(this.x, this.y);
              nv[thing.axis] = value;
              return nv;
            }
            if (op === '/') {
              value = this[thing.axis] / value;
              if (apply) {
                this[thing.axis] = value;
              }
              nv = new Vect2D(this.x, this.y);
              nv[thing.axis] = value;
              return nv;
            }
            if (op === '%') {
              value = this[thing.axis] % value;
              if (apply) {
                this[thing.axis] = value;
              }
              nv = new Vect2D(this.x, this.y);
              nv[thing.axis] = value;
              return nv;
            }
            if (op === '=') {
              value = value;
              if (apply) {
                this[thing.axis] = value;
              }
              nv = new Vect2D(this.x, this.y);
              nv[thing.axis] = value;
              return nv;
            }
          }
        }
      }
      if (typeof thing === 'number') {
        value = parseInt(thing);
        if (op === '*') {
          xx = this.x * value;
          yy = this.y * value;
          if (apply) {
            this.x = xx;
            this.y = yy;
          }
          return new Vect2D(xx, yy);
        }
        if (op === '/') {
          xx = this.x / value;
          yy = this.y / value;
          if (apply) {
            this.x = xx;
            this.y = yy;
          }
          return new Vect2D(xx, yy);
        }
        if (op === '%') {
          xx = this.x % value;
          yy = this.y % value;
          if (apply) {
            this.x = xx;
            this.y = yy;
          }
          return new Vect2D(xx, yy);
        }
      }
    };

    return Vect2D;

  })();

  AxisNum = (function() {

    function AxisNum(value, axis) {
      this.value = value;
      this.axis = axis;
      this.type = 'axisnum';
    }

    AxisNum.prototype.to_string = function() {
      return this.value + this.axis;
    };

    AxisNum.prototype.operate = function(op, thing, apply) {
      var m;
      m = function(k, y) {
        if (op === '+') {
          return k + y;
        }
        if (op === '-') {
          return k - y;
        }
        if (op === '*') {
          return k * y;
        }
        if (op === '/') {
          return k / y;
        }
        if (op === '%') {
          return k % y;
        }
        if (op === '=') {
          return y;
        }
        if (op === '==') {
          return k === y;
        }
      };
      if (op === '+' || op === '-') {
        if (typeof thing === 'number') {
          return new AxisNum(m(this.value, thing), this.axis);
        }
      }
      if (typeof thing === 'object') {
        if ((thing.axis != null) && thing.axis === this.axis) {
          return new AxisNum(m(this.value, thing.value), this.axis);
        }
        if (thing.type === 'v') {
          return m(this.value, thing[this.axis]);
        }
      }
    };

    return AxisNum;

  })();

  EntityRef = (function() {

    function EntityRef(entity) {
      this.type = 'e';
      this.e = entity.EID;
      this.v = new Vect2D(entity.tile_pos[0], entity.tile_pos[1]);
      this.s = entity.nombre;
    }

    EntityRef.prototype.to_string = function() {
      return '' + this.e;
    };

    EntityRef.prototype.operate = function(op, thing, apply) {
      if (op === '==') {
        console.log('EntityRef == ', thing);
        if (typeof thing === 'string') {
          if (thing === this.s) {
            return true;
          }
        }
        if (typeof thing === 'object') {
          if (thing.e != null) {
            return this.e === thing.e;
          }
        }
      } else {
        if (typeof thing === 'object' && thing.type === 'v') {
          return this.v.operate(op, thing);
        }
      }
    };

    return EntityRef;

  })();

  RegisterStack = (function() {

    function RegisterStack() {
      this.array = [];
      this.type = 'stack';
    }

    RegisterStack.prototype.to_string = function() {
      return '[x' + this.array.length + ']';
    };

    return RegisterStack;

  })();

  $(window).ready(function() {
    return window.SlowDataTypes = {
      Vect2D: Vect2D,
      AxisNum: AxisNum,
      EntityRef: EntityRef,
      RegisterStack: RegisterStack
    };
  });

}).call(this);
