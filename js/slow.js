// Generated by CoffeeScript 1.3.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(window).ready(function() {
    var AxisNum, CallPoint, ESCAPE, EntityRef, RegisterStack, SlowException, SlowParser, Vect2D;
    window.Scripter = {
      init: function() {
        var i, _i;
        this.watch = false;
        this.edit_mode = false;
        window.Events.add_listener(this);
        this.inspect = $('<div id="inspect"></div>');
        $('#UI_overlay').append(this.inspect);
        this.vars = $('<div class="script_vars"></div>');
        this.inspect.append(this.vars);
        this.script = $('<div class="script_display"><div class="linenums"></div><code></code></div>');
        this.linenums = this.script.find('.linenums');
        for (i = _i = 0; _i <= 200; i = ++_i) {
          this.linenums.append('<p>' + i + '</p>');
        }
        this.code = this.script.find('code');
        this.editarea = $('<textarea class="tabindent">');
        this.messages = $('<div class="messages"></div>');
        this.filebuttons = $('<div class="buttonrow"></div>');
        this.editbutton = $('<div class="codebutton">edit</div>');
        this.saveload = $('<div class="saveload"><input id="file">\
        \
            <div class="codebutton" id="save">save</div><div class="codebutton" id="load">load</div></div>');
        this.filebuttons.append($('<div id="pause"class="codebutton">||</div>\
          <div id="step"class="codebutton">|></div>'));
        this.saveload.find('#save').click(function() {
          return window.Scripter.save_script(window.Scripter.saveload.find('input').val());
        });
        this.saveload.find('#load').click(function() {
          return window.Scripter.load_script(window.Scripter.saveload.find('input').val());
        });
        this.reference = $('<div class="reference"></div>');
        this.reference.hide();
        this.tileinfo = $('<div class="tileinfo"></div>');
        this.tileinfo.hide();
        this.inspect.append(this.messages);
        this.inspect.append(this.filebuttons);
        this.filebuttons.prepend(this.editbutton);
        this.filebuttons.append(this.saveload);
        this.saveload.css('visibility', 'hidden');
        this.inspect.append(this.script);
        this.inspect.append(this.tileinfo);
        this.inspect.append(this.reference);
        this.filebuttons.find('#pause').click(function() {
          if (!window.pause_code) {
            return window.pause_code = true;
          } else {
            return window.pause_code = false;
          }
        });
        this.filebuttons.find('#step').click(function() {
          return window.next_frame = true;
        });
        this.editbutton.data('scripter', this);
        return this.editbutton.click(function() {
          var scripter;
          scripter = $(this).data('scripter');
          return scripter.toggle_edit();
        });
      },
      save_script: function(filename) {
        var script;
        if (this.watch && this.watch.script && filename && filename !== '') {
          filename = 'SLOWCODE' + filename;
          script = this.editarea.val();
          localStorage[filename] = script;
          return console.log('saved: ', localStorage[filename]);
        }
      },
      load_script: function(filename) {
        var script;
        if (this.watch && this.watch.script && filename && filename !== '') {
          filename = 'SLOWCODE' + filename;
          if (localStorage[filename] != null) {
            script = localStorage[filename];
            return this.editarea.val(script);
          }
        }
      },
      toggle_edit: function() {
        if (this.watch) {
          if (this.edit_mode === false) {
            this.inspect.animate({
              width: 510
            }, 300);
            this.reference.show();
            this.editbutton.html('compile');
            this.saveload.css('visibility', 'visible');
            this.edit_mode = true;
            this.editarea.val(this.watch.script);
            this.editarea.height(this.code.height());
            return this.code.replaceWith(this.editarea);
          } else {
            this.saveload.css('visibility', 'hidden');
            this.watch.run_script(this.editarea.val());
            if (this.watch.error) {
              return this.show(this.watch);
            } else {
              this.reference.hide();
              this.inspect.animate({
                width: 330
              }, 300);
              this.editbutton.html('edit');
              this.edit_mode = false;
              this.editarea.replaceWith(this.code);
              return this.show(this.watch);
            }
          }
        }
      },
      make_docs: function() {
        var args, data, prop, v, _results;
        this.reference.html('');
        if (this.watch) {
          for (prop in this.watch.props) {
            data = this.watch.props[prop];
            v = '?';
            if (typeof data === 'object') {
              if (data.type != null) {
                v = data.type;
              }
            } else if (typeof data === 'string') {
              v = 's';
            } else if (typeof data === 'string') {
              v = 's';
            } else if (typeof data === 'number') {
              if (__indexOf.call(v + '', '.') >= 0) {
                v = 'f';
              } else {
                v = 'i';
              }
            }
            this.reference.append('<p class="prop">@' + prop + ' = ' + v + '</p>');
          }
          _results = [];
          for (prop in this.watch) {
            if (typeof this.watch[prop] === 'function') {
              if (prop[0] === '_' && prop[1] !== '_') {
                args = window.get_function_arg_strings(this.watch[prop]);
                if (args) {
                  args.join(', ');
                } else {
                  args = '';
                }
                _results.push(this.reference.append('<p class="funct">' + prop.slice(1) + '( ' + args + ' )' + '</p>'));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      },
      show_vars: function() {
        var column, i, item, j, type, _i, _j, _k, _len, _len1, _ref, _ref1, _results, _results1;
        if (this.watch && this.watch.script_vars) {
          if (this.vars.children('.column').length > 0) {
            i = 0;
            _results = [];
            for (type in this.watch.script_vars) {
              column = $(this.vars.children('.column')[i]);
              _ref = this.watch.script_vars[type];
              for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
                item = _ref[j];
                if (item === void 0) {
                  item = '';
                }
                if (typeof item === 'object') {
                  item = item.to_string();
                }
                $(column.children('.entry')[j]).html(item);
              }
              _results.push(i += 1);
            }
            return _results;
          } else {
            this.vars.html('');
            for (i = _j = 0; _j <= 4; i = ++_j) {
              this.vars.append($('<div class="column"></div>'));
            }
            i = 0;
            _results1 = [];
            for (type in this.watch.script_vars) {
              $(this.vars.children()[i]).append('<p>' + type + '</p>');
              _ref1 = this.watch.script_vars[type];
              for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
                item = _ref1[_k];
                if (item === void 0) {
                  item = '';
                }
                if (typeof item === 'object') {
                  item = item.to_string();
                }
                $(this.vars.children()[i]).append($('<div class="entry">' + item + '</div>'));
              }
              _results1.push(i += 1);
            }
            return _results1;
          }
        }
      },
      show: function(thing) {
        var avail, column, ih, line, make_block, message, parsed, routine, sdo, _i, _len, _results;
        if (thing == null) {
          thing = false;
        }
        this.watch = thing;
        this.make_docs();
        if (thing.script) {
          this.inspect.css('visibility', 'visible');
          this.show_vars();
        }
        if (thing.error) {
          line = thing.error.line;
          column = thing.error.column;
          message = thing.error.message;
          this.code.html(this.watch.script);
          this.messages.html(message);
          this.linenums.children().removeClass('error');
          return $(this.linenums.children()[line - 1]).addClass('error');
        } else if (thing.script && thing.parsed_script) {
          $('#inspect').height(900);
          sdo = $('#inspect .script_display').offset();
          ih = this.inspect.height();
          avail = ih - sdo.top + 20;
          $('#inspect .script_display').height(avail);
          this.script.show();
          this.messages.show();
          this.vars.show();
          this.tileinfo.hide();
          this.saveload.show();
          this.filebuttons.show();
          this.code.html('');
          this.messages.html('');
          this.linenums.children().removeClass('error');
          parsed = thing.parsed_script;
          make_block = function(obj) {
            var b, begin, block, chars, g, group, head, i, part, statement, sub, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
            block = $('<span class="block"></span>');
            if (obj.begin) {
              begin = obj.begin;
              if (obj.bfirst) {
                group = '';
                _ref = obj["eval"];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  b = _ref[_i];
                  group += '<span class="word">' + b.literal + '</span>';
                }
                begin = obj.bfirst + group + obj.blast;
              }
              head = $('<span class="head">' + begin + '</span>');
              obj._html_head = block;
              head.data('codeblock', obj);
              head.click(function() {
                return console.log('BLOCK: ', $(this).data('codeblock'));
              });
              block.append(head);
            }
            _ref1 = obj.block;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              part = _ref1[i];
              if ((_ref2 = part.type) === 'action' || _ref2 === 'routine' || _ref2 === 'conditional') {
                sub = make_block(part);
                part._html_head = sub;
                sub.data('codeblock', part);
                sub.click(function() {
                  return console.log('BLOCK: ', $(this).data('codeblock'));
                });
                block.append(sub);
              } else {
                statement = $('<span class="block statement"></span>');
                part._html_line = statement;
                chars = 0;
                for (_k = 0, _len2 = part.length; _k < _len2; _k++) {
                  g = part[_k];
                  statement.append($('<span class="word">' + g.literal + '</span>'));
                  chars += g.literal.length;
                }
                statement.append(obj.literals[i].slice(chars));
                block.append(statement);
              }
            }
            if (obj.end) {
              block.append(obj.end);
            }
            return block;
          };
          _results = [];
          for (_i = 0, _len = parsed.length; _i < _len; _i++) {
            routine = parsed[_i];
            _results.push(this.code.append(make_block(routine)));
          }
          return _results;
        } else {
          this.script.hide();
          this.messages.hide();
          return this.vars.hide();
        }
      },
      update: function() {
        var cp, i, index, last_slow_call, last_slow_statement, p, report, si, statement, word, _i, _len;
        if (this.watch && this.script && this.watch.parser) {
          this.code.find('.block, .head').removeClass('current');
          this.code.find('.word').removeClass('chunk');
          this.code.find('.block, .head').removeClass('active_head');
          report = '';
          cp = this.watch.parser.callpoints;
          if (cp.length > 0) {
            for (i = _i = 0, _len = cp.length; _i < _len; i = ++_i) {
              p = cp[i];
              if (p.call._html_head != null) {
                p.call._html_head.children('.head').addClass('active_head');
                index = p.index;
                statement = $(p.call._html_head.children('.block')[index]);
                statement.addClass('current');
                p.call._html_head.removeClass('current');
                last_slow_call = p;
                last_slow_statement = statement;
              }
              report += p.to_string();
            }
            si = last_slow_call.token_index;
            if (si != null) {
              if (last_slow_statement.children('.head').length > 0) {
                word = $(last_slow_statement.children('.head').find('.word')[si]);
              } else {
                word = $(last_slow_statement.find('.word')[si]);
              }
              word.addClass('chunk');
            }
          }
          return this.messages.html('callpoints:' + report + ' token_index=' + si);
        }
      },
      show_tile: function(x, y) {
        var functs, ob, obd, obs, prop, props, stats, _i, _len;
        this.inspect.css('visibility', 'visible');
        $('#inspect').height('auto');
        this.watch = false;
        this.script.hide();
        this.messages.hide();
        this.vars.hide();
        this.saveload.hide();
        this.filebuttons.hide();
        this.tileinfo.show();
        this.editarea.hide();
        stats = $('<p class="tile_pos">path:' + window.Map.get('pathfinding', x, y) + ', ' + x + ',' + y + '</p>');
        obs = window.Map.get('objects', x, y);
        obd = $('<ul id="ob_inspect"></ul>');
        if (obs) {
          for (_i = 0, _len = obs.length; _i < _len; _i++) {
            ob = obs[_i];
            props = '';
            functs = '';
            for (prop in ob) {
              if (ob.hasOwnProperty(prop)) {
                if (typeof prop !== 'function') {
                  props += '<p class="smallp">' + prop + ' = ' + ob[prop] + '</p>';
                }
              } else if (typeof ob[prop] === 'function') {
                functs += '<p class="smallp">' + prop + '()' + '</p>';
              }
            }
            obd.append('<li>' + '<p class="title"><img src="' + window.Draw.images[ob.image].src + '">' + ob.nombre + '</p>' + '<div class="ob_props">' + props + '</div>' + '<div class="ob_functs">' + functs + '</div>' + '</li>');
          }
        }
        this.tileinfo.html('');
        this.tileinfo.append(stats);
        return this.tileinfo.append(obd);
      },
      mouseup: function(e) {
        var found, guy, p, results, t, _i, _len;
        if (!$('#UI_overlay').is($(e.target).parents())) {
          t = window.Events.tile_under_mouse;
          p = {
            x: t[0] * 32,
            y: t[1] * 32
          };
          found = window.Entities.sentient_hash.get_within([p.x, p.y], 32);
          results = [];
          for (_i = 0, _len = found.length; _i < _len; _i++) {
            guy = found[_i];
            if (guy.tile_pos[0] === t[0] && guy.tile_pos[1] === t[1]) {
              results.push(guy);
            }
          }
          if (results.length > 0) {
            return this.show(results[0]);
          } else {
            return this.show_tile(t[0], t[1]);
          }
        }
      }
    };
    window.Scripter.init();
    Vect2D = window.SlowDataTypes.Vect2D;
    AxisNum = window.SlowDataTypes.AxisNum;
    EntityRef = window.SlowDataTypes.EntityRef;
    RegisterStack = window.SlowDataTypes.RegisterStack;
    CallPoint = (function() {

      CallPoint.name = 'CallPoint';

      function CallPoint() {
        this.type = 'slow';
        this.index = 0;
        this.call_token = void 0;
        this.call = void 0;
        this.call_funct = void 0;
        this.call_args = void 0;
        this._return = void 0;
        this.if_group = false;
        this.token_index = 0;
      }

      CallPoint.prototype.to_string = function() {
        return this.call_funct + ' [' + this.index + ']: ';
      };

      CallPoint.prototype.inspect = function(prefix) {
        return console.log(prefix, this.call_token.literal, '>', this.call_funct, this.call_args);
      };

      CallPoint.prototype["return"] = function(result) {
        if (result == null) {
          result = void 0;
        }
        if (this.call_token != null) {
          if (result != null) {
            return this.call_token.result = result;
          } else {
            return this.call_token.result = this._return;
          }
        }
      };

      return CallPoint;

    })();
    SlowException = (function() {

      SlowException.name = 'SlowException';

      function SlowException(message) {
        this.message = message;
        this.error = true;
      }

      SlowException.prototype.to_string = function() {
        return 'ERROR';
      };

      return SlowException;

    })();
    ESCAPE = (function() {

      ESCAPE.name = 'ESCAPE';

      function ESCAPE() {
        this.escape = true;
      }

      return ESCAPE;

    })();
    SlowParser = (function() {

      SlowParser.name = 'SlowParser';

      function SlowParser(self, json) {
        var i, r, _i, _len, _ref;
        this.self = self;
        this.json = json;
        this.routines = {};
        _ref = this.json;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          r = _ref[i];
          r.routine_index = i;
          this.routines[r.action] = r;
        }
        this.callpoints = [];
      }

      SlowParser.prototype.indent = function() {
        var i, r, _i, _ref;
        r = '|';
        for (i = _i = 0, _ref = this.callpoints.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          r += '  ';
        }
        return r;
      };

      SlowParser.prototype.exec = function() {
        var cp, lines, result, target;
        if (!window.pause_code || window.pause_code && window.next_frame) {
          if (!this.callpoints.get_last()) {
            if (this.routines['main']) {
              cp = new CallPoint();
              cp.type = 'slow';
              cp.call = this.routines['main'];
              cp.call_funct = 'main';
              cp.index = 0;
              this.callpoints.push(cp);
            }
          }
          if (this.callpoints.length > 0) {
            cp = this.callpoints.get_last();
            if (cp.type === 'native') {
              result = cp.call[cp.call_funct](cp.call_args);
              if (result === void 0) {

              } else {
                cp["return"](result);
                return this.callpoints.pop();
              }
            } else {
              lines = cp.call.block;
              if (lines.length > cp.index) {
                target = lines[cp.index];
                result = this.run_statement(lines[cp.index]);
                if (typeof result === 'object' && result.escape === true) {

                } else {
                  cp.index += 1;
                  cp.token_index = 0;
                  cp["return"](result);
                  if (window.pause_code) {
                    return window.next_frame = false;
                  }
                }
              } else {
                this.recurse_clean_line(cp.call.block);
                return this.callpoints.pop();
              }
            }
          }
        }
      };

      SlowParser.prototype.recurse_clean_line = function(obj) {
        var part, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _results;
        if (!(obj != null)) {
          return;
        }
        if (obj instanceof Array) {
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            part = obj[_i];
            this.recurse_clean_line(part);
          }
        }
        if (obj.type === 'enclosure') {
          _ref = obj.value;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            part = _ref[_j];
            this.recurse_clean_line(part);
          }
        }
        if (obj.result != null) {
          delete obj.result;
        }
        if (obj.block != null) {
          _ref1 = obj.block;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            part = _ref1[_k];
            this.recurse_clean_line(part);
          }
        }
        if (obj["eval"] != null) {
          _ref2 = obj["eval"];
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            part = _ref2[_l];
            this.recurse_clean_line(part);
          }
        }
        if (obj.args != null) {
          _ref3 = obj.args;
          _results = [];
          for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
            part = _ref3[_m];
            _results.push(this.recurse_clean_line(part));
          }
          return _results;
        }
      };

      SlowParser.prototype.run_statement = function(line) {
        var cp, ev, first, result, slot, _ref, _ref1;
        cp = this.callpoints.get_last();
        cp.token_index = -1;
        if ((line.type != null) && ((_ref = line.type) === 'conditional')) {
          if (line.term === 'if') {
            cp.if_group = false;
          }
          if (cp.if_group === false) {
            if (line.result != null) {
              return true;
            }
            if (line.term === 'else' && line["eval"] === '') {
              cp.if_group = true;
              cp.index += 1;
              cp = new CallPoint();
              cp.type = 'slow';
              cp.call = line;
              cp.call_funct = line.term;
              cp.call_token = line;
              this.callpoints.push(cp);
              return new ESCAPE();
            }
            ev = this.calculate(line["eval"]);
            if ((ev != null) && (ev.escape != null)) {
              return ev;
            }
            if (ev !== false && ev !== 0 && ev !== (void 0)) {
              cp.if_group = true;
              cp.index += 1;
              cp = new CallPoint();
              cp.type = 'slow';
              cp.call = line;
              cp.call_funct = line.term;
              cp.call_token = line;
              this.callpoints.push(cp);
              return new ESCAPE();
            } else {
              return true;
            }
          } else {
            return true;
          }
        } else {
          if (cp.if_group) {
            cp.if_group = false;
          }
        }
        first = line[0];
        if (typeof first !== 'object') {
          console.log('ERROR parsing first token: ', first);
          return true;
        }
        if ((first.type != null) && ((_ref1 = first.type) === 'reserved')) {
          if (first.value.toLowerCase() === 'delete') {
            slot = line[1];
            if (slot.type === 'memory') {
              this.delete_var(slot);
              window.Scripter.show_vars();
              return true;
            }
          }
          if (first.value.toLowerCase() === 'return') {
            result = this.calculate(line, true);
            cp = this.callpoints.get_last();
            cp["return"](result);
            this.recurse_clean_line(cp.call.block);
            this.callpoints.pop();
            return new ESCAPE();
          }
        }
        cp.token_index = -1;
        result = this.calculate(line, true);
        if ((result != null) && ((result.escape != null) || (result.error != null))) {
          return result;
        } else {
          if (this.assign) {
            this.store_var(this.assign, result);
            this.assign = false;
            window.Scripter.show_vars();
          }
        }
        return result;
      };

      SlowParser.prototype.store_var = function(reg, value) {
        var result;
        if (value === void 0) {
          value = void 0;
        } else if (reg.slot === 'E') {
          if (value.e) {
            value = value;
          } else {
            result = result + '';
          }
        } else if (reg.slot === 'S') {
          if (value.s != null) {
            value = value.s;
          } else if (value.to_string != null) {
            value = value.to_string();
          } else {
            value = value + '';
          }
        } else if (reg.slot === 'V') {
          if (value.v != null) {
            value = value.v;
          } else if (value.x != null) {
            value = value;
          } else {
            value = void 0;
          }
        } else if (reg.slot === 'I') {
          if (typeof value === 'object' || value === true) {
            value = 1;
          } else if (value === false) {
            value = 0;
          } else {
            value = parseInt(value);
          }
        } else if (reg.slot === 'F') {
          if (typeof value === 'object' || value === true) {
            value = 1;
          } else if (value === false) {
            value = 0;
          } else {
            value = parseFloat(value).toFixed(2);
          }
        }
        return this.self.script_vars[reg.slot][reg.index] = value;
      };

      SlowParser.prototype.delete_var = function(reg) {
        try {
          return this.self.script_vars[reg.slot][parseInt(reg.index)] = void 0;
        } catch (error) {
          return console.log('cant delete register ', reg, error);
        }
      };

      SlowParser.prototype.untoken = function(obj, i) {
        var args, cp, funct, indx, mem, r;
        if (i == null) {
          i = 0;
        }
        if (typeof obj !== 'object') {
          return new ERROR('unknown meaning');
        }
        if (obj.result != null) {
          return obj.result;
        }
        if (obj.type === 'enclosure') {
          return this.calculate(obj.value);
        }
        if (obj.type === 'null') {
          return;
        }
        if (obj.type === 'boolean') {
          if (obj.value === 'true') {
            return true;
          }
          if (obj.value === 'false') {
            return false;
          }
        }
        if (obj.type === 'number') {
          return obj.value;
        }
        if (obj.type === 'string') {
          return obj.value;
        }
        if (obj.type === 'self') {
          if (this.self.props[obj.value] != null) {
            return this.self.props[obj.value];
          }
        }
        if (obj.type === 'reserved') {
          if (obj.value.toLowerCase() === 'arg') {
            return this.callpoints.get_last().call_args;
          }
          return;
        }
        if (obj.type === 'memory') {
          if (obj.index === '&') {
            indx = 10;
          } else {
            indx = parseInt(obj.index);
          }
          mem = this.self.script_vars[obj.slot][parseInt(obj.index)];
          return mem;
        }
        if (obj.type === 'axisnumber') {
          return new AxisNum(obj.value, obj.axis);
        }
        if (obj.type === 'call') {
          if (obj.result != null) {
            r = obj.result;
            return r;
          }
          funct = obj.value.value;
          if ((this.self['_' + funct] != null) && typeof this.self['_' + funct] === 'function') {
            args = this.calculate(obj.args);
            if ((args != null) && ((args.escape != null) || (args.error != null))) {
              return args;
            } else {
              cp = new CallPoint();
              cp.call_args = args;
              cp.type = 'native';
              cp.call_token = obj;
              cp.call = this.self;
              cp.call_funct = '_' + funct;
              this.callpoints.push(cp);
              return new ESCAPE();
            }
          } else if (this.routines[funct] != null) {
            args = this.calculate(obj.args);
            if ((args != null) && ((args.escape != null) || (args.error != null))) {
              return args;
            } else {
              cp = new CallPoint();
              cp.call_args = args;
              cp.type = 'slow';
              cp.call_token = obj;
              cp.call = this.routines[funct];
              cp.call_funct = funct;
              this.callpoints.push(cp);
              return new ESCAPE();
            }
          }
        }
      };

      SlowParser.prototype.calculate = function(tokens, top) {
        var cp, i, n, next, operator, report, t, token, valid, value, _i, _j, _len, _len1, _ref;
        if (top == null) {
          top = false;
        }
        cp = this.callpoints.get_last();
        report = '';
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          t = tokens[_i];
          report += t.type + ' ';
        }
        value = void 0;
        valid = false;
        operator = false;
        for (i = _j = 0, _len1 = tokens.length; _j < _len1; i = ++_j) {
          token = tokens[i];
          if (top) {
            cp.token_index += 1;
          }
          if (token.type === 'reserved' && token.value === 'return') {
            n = 0;
          } else if (!valid) {
            value = this.untoken(token, i);
            if ((value != null) && ((value.error != null) || (value.escape != null))) {
              return value;
            } else {
              valid = true;
            }
          } else if (!operator) {
            if ((_ref = token.type) === 'operator' || _ref === 'compare' || _ref === 'assignment') {
              operator = token.value;
            }
          } else {
            next = this.untoken(token, i);
            if ((next != null) && ((next.error != null) || (next.escape != null))) {
              return next;
            }
            if (typeof value === 'object' && value.operate && (operator === '+' || operator === '-' || operator === '*' || operator === '/' || operator === '%' || operator === '=' || operator === '==')) {
              value = value.operate(operator, next);
              if (operator === '=') {
                if (tokens[i - 2].type === 'memory') {
                  this.assign = tokens[i - 2];
                }
              }
            } else if (operator === '+') {
              value += next;
            } else if (operator === '-') {
              value -= next;
            } else if (operator === '*') {
              value *= next;
            } else if (operator === '/') {
              value /= next;
            } else if (operator === '%') {
              value %= next;
            } else if (operator === '==') {
              value = value === next;
            } else if (operator === '<=') {
              value = value <= next;
            } else if (operator === '>=') {
              value = value >= next;
            } else if (operator === '<') {
              value = value < next;
            } else if (operator === '>') {
              value = value > next;
            } else if (operator === '&') {
              value = value && next;
            } else if (operator === '|') {
              value = value || next;
            }
            if (operator === '=') {
              if (tokens[i - 2].type === 'memory') {
                value = next;
                this.assign = tokens[i - 2];
              }
            }
            operator = false;
          }
        }
        return value;
      };

      return SlowParser;

    })();
    return window.Entities.slowparser = SlowParser;
  });

}).call(this);
