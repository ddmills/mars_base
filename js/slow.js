// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  $(window).ready(function() {
    var CallPoint, Scripted, SlowParser;
    window.Scripter = {
      init: function() {
        var i, _i;
        this.watch = false;
        this.edit_mode = false;
        window.Events.add_listener(this);
        this.inspect = $('<div id="inspect"></div>');
        $('#UI_overlay').append(this.inspect);
        this.vars = $('<div class="script_vars"></div>');
        this.inspect.append(this.vars);
        this.script = $('<div class="script_display"><div class="linenums"></div><code></code></div>');
        this.linenums = this.script.find('.linenums');
        for (i = _i = 0; _i <= 200; i = ++_i) {
          this.linenums.append('<p>' + i + '</p>');
        }
        this.code = this.script.find('code');
        this.editarea = $('<textarea class="tabindent">');
        this.messages = $('<div class="messages"></div>');
        this.editbutton = $('<div class="codebutton">edit</div>');
        this.reference = $('<div class="reference"></div>');
        this.reference.hide();
        this.inspect.append(this.messages);
        this.inspect.append(this.editbutton);
        this.inspect.append(this.script);
        this.inspect.append(this.reference);
        this.editbutton.data('scripter', this);
        return this.editbutton.click(function() {
          var scripter;
          scripter = $(this).data('scripter');
          return scripter.toggle_edit();
        });
      },
      toggle_edit: function() {
        if (this.watch) {
          if (this.edit_mode === false) {
            this.inspect.animate({
              width: 510
            }, 300);
            this.reference.show();
            this.editbutton.html('compile');
            this.edit_mode = true;
            this.editarea.val(this.watch.script);
            this.editarea.height(this.code.height());
            return this.code.replaceWith(this.editarea);
          } else {
            this.watch.run_script(this.editarea.val());
            if (this.watch.error) {
              return this.show(this.watch);
            } else {
              this.reference.hide();
              this.inspect.animate({
                width: 330
              }, 300);
              this.editbutton.html('edit');
              this.edit_mode = false;
              this.editarea.replaceWith(this.code);
              return this.show(this.watch);
            }
          }
        }
      },
      make_docs: function() {
        var args, prop, _results;
        this.reference.html('');
        if (this.watch) {
          for (prop in this.watch.props) {
            this.reference.append('<p class="prop">@' + prop + ' = ' + this.watch.props[prop] + '</p>');
          }
          _results = [];
          for (prop in this.watch) {
            if (typeof this.watch[prop] === 'function') {
              if (prop[0] === '_' && prop[1] !== '_') {
                args = window.get_function_arg_strings(this.watch[prop]);
                if (args) {
                  args.join(', ');
                } else {
                  args = '';
                }
                _results.push(this.reference.append('<p class="funct">' + prop.slice(1) + '( ' + args + ' )' + '</p>'));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      },
      show_vars: function() {
        var i, item, type, _i, _j, _len, _ref, _results;
        if (this.watch && this.watch.script_vars) {
          this.vars.html('');
          for (i = _i = 0; _i <= 4; i = ++_i) {
            this.vars.append($('<div class="column"></div>'));
          }
          i = 0;
          _results = [];
          for (type in this.watch.script_vars) {
            $(this.vars.children()[i]).append('<p>' + type + '</p>');
            _ref = this.watch.script_vars[type];
            for (_j = 0, _len = _ref.length; _j < _len; _j++) {
              item = _ref[_j];
              if (item === void 0) {
                item = '';
              }
              $(this.vars.children()[i]).append($('<div class="entry">' + item + '</div>'));
            }
            _results.push(i += 1);
          }
          return _results;
        }
      },
      show: function(thing) {
        var column, line, make_block, message, parsed, routine, _i, _len, _results;
        this.watch = thing;
        this.make_docs();
        if (thing.script) {
          this.inspect.css('visibility', 'visible');
          this.show_vars();
        }
        if (thing.error) {
          line = thing.error.line;
          column = thing.error.column;
          message = thing.error.message;
          this.code.html(this.watch.script);
          this.messages.html(message);
          this.linenums.children().removeClass('error');
          return $(this.linenums.children()[line - 1]).addClass('error');
        } else if (thing.script && thing.parsed_script) {
          this.code.html('');
          this.messages.html('');
          this.linenums.children().removeClass('error');
          parsed = thing.parsed_script;
          make_block = function(obj) {
            var block, g, i, part, statement, sub, _i, _j, _len, _len1, _ref, _ref1;
            block = $('<span class="block"></span>');
            if (obj.begin) {
              block.append(obj.begin);
            }
            _ref = obj.block;
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              part = _ref[i];
              if ((_ref1 = part.type) === 'action' || _ref1 === 'routine' || _ref1 === 'conditional') {
                sub = make_block(part);
                block.append(sub);
              } else {
                statement = $('<span class="block statement"></span>');
                for (_j = 0, _len1 = part.length; _j < _len1; _j++) {
                  g = part[_j];
                  statement.append($('<span class="word">' + g.literal + '</span>'));
                }
                statement.append(';');
                block.append(statement);
              }
            }
            if (obj.end) {
              block.append(obj.end);
            }
            return block;
          };
          _results = [];
          for (_i = 0, _len = parsed.length; _i < _len; _i++) {
            routine = parsed[_i];
            _results.push(this.code.append(make_block(routine)));
          }
          return _results;
        }
      },
      update: function() {
        var cp, i, index, si, start, _i, _ref;
        if (this.watch && this.script && this.watch.parser) {
          this.code.find('.block').removeClass('current');
          this.code.find('.word').removeClass('chunk');
          start = this.code;
          for (i = _i = 0, _ref = this.watch.parser.block_level; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            index = this.watch.parser.code_index[i];
            start = $(start.children('.block')[index]);
          }
          start.addClass('current');
          cp = this.watch.parser.callpoints.get_last();
          if (cp) {
            si = cp.statement_index;
            if (si != null) {
              return $(start.children('.word')[si]).addClass('chunk');
            }
          }
        }
      },
      mouseup: function() {
        var found, guy, p, results, t, _i, _len;
        t = window.Events.tile_under_mouse;
        p = {
          x: t[0] * 32,
          y: t[1] * 32
        };
        found = window.Entities.sentient_hash.get_within([p.x, p.y], 32);
        results = [];
        for (_i = 0, _len = found.length; _i < _len; _i++) {
          guy = found[_i];
          if (guy.tile_pos[0] === t[0] && guy.tile_pos[1] === t[1]) {
            results.push(guy);
          }
        }
        if (results.length > 0) {
          console.log('Selected:', results);
          return this.show(results[0]);
        }
      }
    };
    window.Scripter.init();
    Scripted = (function(_super) {

      __extends(Scripted, _super);

      Scripted.name = 'Scripted';

      function Scripted() {
        return Scripted.__super__.constructor.apply(this, arguments);
      }

      Scripted.prototype.init_2 = function() {
        this.speed = 2;
        this.parsed_script = false;
        this.parser = false;
        this.script = false;
        this.error = false;
        try {
          this.parsed_script = window.slow_parser.parse(this.script);
        } catch (error) {
          console.log('parse error: ', error, this.script);
        }
        console.log(this.parsed_script);
        if (this.parsed_script) {
          return this.parser = new SlowParser(this, this.parsed_script);
        }
      };

      Scripted.prototype.update = function(delta) {
        if (this.parser) {
          return this.parser.exec();
        }
      };

      Scripted.prototype.run_script = function(script) {
        var i, _i, _results;
        this.script = script;
        try {
          this.parsed_script = window.slow_parser.parse(this.script);
          this.error = false;
        } catch (error) {
          this.error = {
            line: error.line,
            column: error.column,
            message: error.name + ': ' + error.found
          };
        }
        if (this.parsed_script) {
          console.log(this.parsed_script);
          this.parser = new SlowParser(this, this.parsed_script);
          this.script_vars = {
            i: [],
            f: [],
            s: [],
            v: [],
            e: []
          };
          _results = [];
          for (i = _i = 0; _i <= 9; i = ++_i) {
            this.script_vars.i.push(void 0);
            this.script_vars.f.push(void 0);
            this.script_vars.s.push(void 0);
            this.script_vars.v.push(void 0);
            _results.push(this.script_vars.e.push(void 0));
          }
          return _results;
        }
      };

      Scripted.prototype.walk_path = function() {
        var near, p1, p2, tilesize;
        if (!(this.path != null) || this.path.length === 0) {
          return false;
        }
        tilesize = window.Map.tilesize;
        p1 = this.path[0][0] * tilesize;
        p2 = this.path[0][1] * tilesize;
        this.vect_to_target = new Vector((this.path[0][0] * tilesize) - this.pos[0], (this.path[0][1] * tilesize) - this.pos[1], 0);
        this.dist_to_target = this.vect_to_target.length();
        this.target_vect = this.normalize_vector(this.vect_to_target);
        this.vector = Vector.lerp(this.vector, this.target_vect, this.turn_speed);
        near = 10;
        if (this.pos[0] > p1 - near && this.pos[0] < p1 + near && this.pos[1] > p2 - near && this.pos[1] < p2 + near) {
          this.path = this.path.splice(1, this.path.length);
          this.velocity = .1;
          if (this.path.length === 0) {
            return true;
          }
        } else {
          this.move(1);
        }
        return false;
      };

      return Scripted;

    })(window.Entities.classes.SlowSentient);
    CallPoint = (function() {

      CallPoint.name = 'CallPoint';

      function CallPoint(index_stack, word, callee, callee_funct, callee_args, callee_return) {
        this.index_stack = index_stack != null ? index_stack : void 0;
        this.word = word != null ? word : void 0;
        this.callee = callee != null ? callee : false;
        this.callee_funct = callee_funct != null ? callee_funct : false;
        this.callee_args = callee_args != null ? callee_args : [];
        this.callee_return = callee_return != null ? callee_return : void 0;
      }

      return CallPoint;

    })();
    SlowParser = (function() {

      SlowParser.name = 'SlowParser';

      function SlowParser(self, json) {
        var r, _i, _len, _ref;
        this.self = self;
        this.json = json;
        this.scope = false;
        this.scope_stack = [];
        this.code_index = [0];
        this.block_level = 0;
        this.routines = {};
        _ref = this.json;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          this.routines[r.action] = r;
        }
        this.conditionals = {};
        this.callpoints = [];
      }

      SlowParser.prototype.enter_block = function(block) {
        this.block_level += 1;
        if (this.code_index.length - 1 < this.block_level) {
          this.code_index.push(0);
        }
        this.code_index[this.block_level] = 0;
        this.scope = block;
        return this.scope_stack.push(block);
      };

      SlowParser.prototype.leave_block = function() {
        var scope;
        this.code_index[this.block_level] = 0;
        scope = this.scope;
        this.block_level -= 1;
        this.code_index[this.block_level] += 1;
        if (this.block_level === 0) {
          this.scope = false;
          return this.code_index[this.block_level] = 0;
        } else {
          this.scope_stack.pop();
          return this.scope = this.scope_stack[this.scope_stack.length - 1];
        }
      };

      SlowParser.prototype.exec = function() {
        var cp, lines, result;
        if (!this.scope) {
          if (this.routines['main']) {
            this.enter_block(this.routines['main']);
          }
        }
        if (this.callpoints.length > 0) {
          cp = this.callpoints.get_last();
          result = cp.callee[cp.callee_funct](cp.callee_args);
          if (result === void 0) {
            return;
          } else {
            cp.word.result = result;
            cp.callee_return = result;
            this.callpoints.pop();
          }
        }
        if (this.scope) {
          lines = this.scope.block;
          if (lines.length > this.code_index[this.block_level]) {
            return this.run_statement(lines[this.code_index[this.block_level]]);
          } else {
            return this.leave_block();
          }
        }
      };

      SlowParser.prototype.run_statement = function(line) {
        var args, assign, ev, first, funct, index, parts, pattern, register, result, value, value_found, vars, _ref;
        if ((line.type != null) && ((_ref = line.type) === 'conditional')) {
          if (line.term === 'if') {
            this.conditionals[this.block_level] = false;
          }
          if (this.conditionals[this.block_level] === false) {
            if (line.term === 'else' && line["eval"] === '') {
              this.conditionals[this.block_level] = true;
              this.enter_block(line);
              return;
            }
            ev = this.calculate(line["eval"]);
            if (ev !== false && ev !== 0 && ev !== (void 0)) {
              this.conditionals[this.block_level] = true;
              this.enter_block(line);
              return;
            } else {
              this.code_index[this.block_level] += 1;
              return;
            }
          } else {
            this.code_index[this.block_level] += 1;
            return;
          }
        } else {
          if (this.conditionals[this.block_level] != null) {
            delete this.conditionals[this.block_level];
          }
        }
        index = 0;
        parts = line.length;
        pattern = false;
        funct = false;
        register = false;
        assign = false;
        value = void 0;
        value_found = false;
        args = false;
        vars = [];
        first = line[0];
        if (typeof first !== 'object') {
          console.log('ERROR parsing first token: ', first);
        }
        result = this.calculate(line);
        if (result) {
          if (this.assign) {
            console.log('assign: ', this.self.script_vars[this.assign.slot], result);
            this.self.script_vars[this.assign.slot][this.assign.index] = result;
            this.assign = false;
            window.Scripter.show_vars();
          }
          return this.code_index[this.block_level] += 1;
        }
      };

      SlowParser.prototype.store_var = function(reg, value) {
        if (reg.slot === 'i') {
          value = parseInt(value);
        }
        if (reg.slot === 'f') {
          value = parseFloat(value).toFixed(2);
        }
        return this.self.script_vars[reg.slot][reg.index] = value;
      };

      SlowParser.prototype.untoken = function(obj, i) {
        var args, funct, mem, point, r, stack, v;
        if (i == null) {
          i = 0;
        }
        if (typeof obj !== 'object') {
          return;
        }
        if (obj.type === 'enclosure') {
          return this.calculate(obj.value);
        }
        if (obj.type === 'number') {
          return obj.value;
        }
        if (obj.type === 'memory') {
          mem = this.self.script_vars[obj.slot][obj.index];
          if (mem === void 0) {
            mem = false;
          }
          return mem;
        }
        if (obj.type === 'call') {
          funct = obj.value.value;
          v = this.self['_' + funct];
          if ((this.self['_' + funct] != null) && typeof this.self['_' + funct] === 'function') {
            if (obj.result != null) {
              r = obj.result;
              return r;
            } else {
              args = this.calculate(obj.args);
              console.log(args);
              stack = this.code_index.clone();
              point = new CallPoint(stack, obj, this.self, '_' + funct, args);
              point.statement_index = i;
              this.callpoints.push(point);
            }
          }
        }
      };

      SlowParser.prototype.calculate = function(tokens) {
        var i, next, operator, report, t, token, valid, value, _i, _j, _k, _len, _len1, _len2, _ref;
        report = '';
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          t = tokens[_i];
          report += t.value + ' ';
        }
        value = void 0;
        valid = false;
        operator = false;
        for (i = _j = 0, _len1 = tokens.length; _j < _len1; i = ++_j) {
          token = tokens[i];
          if (value === void 0) {
            if (!valid) {
              value = this.untoken(token, i);
              valid = true;
            } else {
              return;
            }
          } else if (!operator) {
            if ((_ref = token.type) === 'operator' || _ref === 'compare' || _ref === 'assignment') {
              operator = token.value;
            } else if (token.type === 'compare') {
              operator = token.value;
            } else {
              return;
            }
          } else {
            next = this.untoken(token, i);
            if (next) {
              console.log(value, operator, next);
              if (operator === '+') {
                value += next;
              } else if (operator === '-') {
                value -= next;
              } else if (operator === '*') {
                value *= next;
              } else if (operator === '/') {
                value /= next;
              } else if (operator === '%') {
                value %= next;
              } else if (operator === '==') {
                value = value === next;
              } else if (operator === '<=') {
                value = value <= next;
              } else if (operator === '>=') {
                value = value >= next;
              } else if (operator === '<') {
                value = value < next;
              } else if (operator === '>') {
                value = value > next;
              } else if (operator === '&') {
                value = value && next;
              } else if (operator === '|') {
                value = value || next;
              } else if (operator === '=') {
                if (tokens[i - 2].type === 'memory') {
                  value = next;
                  this.assign = tokens[i - 2];
                }
              }
              operator = false;
            }
          }
        }
        for (_k = 0, _len2 = tokens.length; _k < _len2; _k++) {
          token = tokens[_k];
          delete token.result;
        }
        return value;
      };

      return SlowParser;

    })();
    return window.Entities.classes.Scripted = Scripted;
  });

}).call(this);
