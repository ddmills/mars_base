start
  = action+

action
  = w1:white action:word w2:white ':' w9:white start:start_group w3:white statement:(statement / conditional)* w4:white end:end_group w5:white
  {
data = [];
literals = [];

 for (_i = 0, _len = statement.length; _i < _len; _i++) {
  part = statement[_i];
  if (part.type == 'conditional'){
    data.push(part);
  } else {
    data.push(part.value);
  }
  literals.push(part.literal);
 }

return {type:'routine', action:action.value, block:data, literals:literals,
begin:w1+action.literal+w2+':'+w9+start.literal+w3,
end:w4+end.literal+w5}}

conditional =
  w1:white  
  logic:('if'i / 'else'i ) w2:white eval: logic_block?
  w3:white ':'
  w4:white start:start_group w5:white
  statement:(statement / conditional)*
  w6:white end:end_group w7:white

{

evlit = ''; 
 for (_i = 0, _len = eval.length; _i < _len; _i++) {
  part = eval[_i];
  evlit += part.literal
 }

lits = '';
literals = [];
data = [];
 for (_i = 0, _len = statement.length; _i < _len; _i++) {
  part = statement[_i];
  lits += part.literal
  literals.push(part.literal);
  if (part.type == 'conditional'){
    data.push(part);
  } else {
    data.push(part.value);
  }
 }

begin = w1+logic+w2+evlit+w3+':'+w4+start.literal
+w5;
end = w6+end.literal+w7;
return {type:'conditional', term:logic, eval:eval,
block:data, literals:literals, literal: begin+lits+end,
begin:begin,
bfirst:w1+logic+w2,

blast: w3+':'+w4+start.literal+w5,
end:end  } }




logic_block =
  parts:( reserved / null / call / axisnumber / boolean / number /  comparative / assignment / operator / string /
           memory / self / enclosure )+ 
   {return parts }


comment =
  "//"  string:[a-zA-Z0-9]*  newline:newline
{return '//'+string.join('')+newline}

reserved
  = w1:white string:( 'delete'i / 'return'i / 'arg'i ) w2:white 
  {return {type:'reserved', value:string.toLowerCase(), literal:w1+string+w2}}

null
  = w1:white string:( 'null'i / 'undefined'i ) w2:white 
  {return {type:'null', value:string.toLowerCase(), literal:w1+string+w2}}


word
  = w1:white string:[a-zA-Z_]+ w2:white 
  {return {type:'word', value:string.join(''), literal:w1+string.join('')+w2}}

white
  = string:(" " / newline / tab / comment)* {return string.join('')}

newline =
  [\n] {return "\n" }

tab =
  [\t] {return "\t" }

statement
  = w1:white block:(logic_block ) end:end_line
    { 
literal = ''; 
 for (_i = 0, _len = block.length; _i < _len; _i++) {
  part = block[_i];
  literal += part.literal
 }

return {type:'statement', value:block, literal:w1+literal+end.literal, end:end.literal} }




string = string:(string_double / string_single) {return string}

string_double =
  w1:white q1:'"' string:([a-zA-Z0-9]* )  q2:'"' w2:white
    {return {type:'string', value:string.join(''), literal:w1+q1+string.join('')+q2+w2}}

string_single =
  w1:white q1:"'" string:([a-zA-Z0-9]* )  q2:"'" w2:white
    {return {type:'string', value:string.join(''), literal:w1+q1+string.join('')+q2+w2}}


axisnumber
  = w1:white number:(float / integer) axis:('x'i / 'y'i) w2:white
    {return {type:'axisnumber', value:number, axis:axis, literal:w1+number+axis+w2}}


number
  = w1:white number:(float / integer) w2:white
    {return {type:'number', value:number, literal:w1+number+w2}}

float
  = sign:"-"?
    before:[0-9]* "." after:[0-9]+ {
      return parseFloat(sign+before.join("") + "." + after.join(""));
    }

integer
  = sign:"-"?
    digits:[0-9]+ {
      return parseInt(sign+digits.join(""), 10);
    }

boolean = 
  w1:white bool:('true'i / 'false'i) w2:white
    {return {type:'boolean', value:bool, literal:w1+bool+w2}}

operator
  = w1:white operator:('+' / '-' / '/' / '*' / '%') w2:white
  {return {type:'operator', value:operator, literal:w1+operator+w2}}

assignment
  = w1:white ass:("+=" / "-=" / "*=" / "/=" / "=") w2:white 
 {return {type:'assignment', value:ass, literal:w1+ass+w2}}

comparative
 = w1:white comp:('==' / '<=' / '>=' / '<' / '>' /  
   '&' / '|' ) w2:white
  {return {type:'compare', value:comp, literal:w1+comp+w2}}



call = w1:white word:word w2:white
       start:start_group w3:white
       args:logic_block? w4:white
       end:end_group w5:white
    {
literal = ''; 
 for (_i = 0, _len = args.length; _i < _len; _i++) {
  part = args[_i];
  literal += part.literal
 }

return {type:'call', value:word, args:args, 
     literal:w1+word.literal+w2+start.literal+w3+literal+w4+end.literal+w5}}





/* */

start_group
  = w1:white start:( '(' / '{' / '[' ) w2:white
  {return {type:'end_line', value:start, literal:w1+start+w2} }

end_group
  = w1:white end:( ')' / '}' / ']' ) w2:white
  {return {type:'end_line', value:end, literal:w1+end+w2} }

end_line
  = w1:white end:( ';' / ',' / '.' ) w2:white
  {return {type:'end_line', value:end, literal:w1+end+w2} }

enclosure =
  w1:white start:start_group w2:white block:logic_block w3:white end:end_group w4:white
  { 

literal = ''; 
 for (_i = 0, _len = block.length; _i < _len; _i++) {
  part = block[_i];
  literal += part.literal
 }

return {type:'enclosure' , value:block, 
literal:w1+start.literal+w2+literal+w3+end.literal+w2} }


ifend =
   w1:white sym: ':'  w2:white
  {return {type:'ifend', value:sym, literal:w1+sym+w2} }



/* game stuff */ 

memory
 = w1:white slot:('I' / 'F' / 'S' / 'V' / 'E') index:([0-9] / '&' ) w2:white {return {type:'memory', slot:slot, index:index, 
literal:w1+slot+index+w2}}

self
  = w1:white amp:'@' self:[a-zA-Z_]+ w2:white {return {type:'self', value:self.join(''), literal:w1+amp+self.join('')+w2 } }





/* test data

main ( 
  wait(20);
  if $i0:(
    if wander(4):(
    $i0 = $i0 + 1;
  ) else :(
    $i1 = $i1 + 1;
  )
  )
  else:(
    $i0 = 1;
  $i1 = 1;
    wait(20);
  )
)




*/