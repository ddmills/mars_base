start
  = action+

action
  = white action:word white start_group white statement:statement* white end_group white
  {return {action:action.value, statements:statement}}

word
  = white string:[a-zA-Z_]+ white {return {type:'word', value:string.join('')}}

white
  = [" "\n\t]*

statement
  = word:logic_block end_line white
    { return word }

logic_block =
  white word:( word / number / operator / assignment / comparative / 
           memory / self / enclosure )+ white
    { return word }

number
  = white number:(float / integer) white
    {return number}

float
  = sign:"-"?
    before:[0-9]* "." after:[0-9]+ {
      return parseFloat(sign+before.join("") + "." + after.join(""));
    }

integer
  = sign:"-"?
    digits:[0-9]+ {
      return parseInt(sign+digits.join(""), 10);
    }

operator
  = white operator:('+' / '-' / '/' / '*' / '%') white
  {return {type:'operator', value:operator}}

assignment
  = white "=" white {return '='}

comparative
 = white comp:('==' / '<' / '>' / '<=' / '>=' / '&') white
  {return {type:'compare', value:comp}}


/* */

start_group
  = white ( '(' / '{' / '[' ) white

end_group
  = white ( ')' / '}' / ']' ) white

end_line
  = white ( ';' / ':' / ',' / '.' ) white

enclosure =
  white start_group white block:logic_block white end_group white
  { return block }



/* game stuff */ 

memory
 = white sym:'$' slot:('i' / 'f' / 's' / 'l' / 'e') index:[0-9] white {return {type:'memory', slot:slot, index:index}}

self
  = white amp:'@' self:[a-zA-Z_]+ white {return {type:'self', value:self.join('') } }




